Frontend files for Post Detail & Comments API integration - Collected on Mon Jun  2 18:31:20 UTC 2025
===============================================================================

--- START OF FILE: src/components/posts/PostDetailScreen.tsx ---
// src/components/posts/PostDetailScreen.tsx
import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { ChevronLeft } from 'lucide-react';

const PostDetailScreen = () => {
  const { postId } = useParams<{ postId: string }>();
  const navigate = useNavigate();

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-950 p-4">
      <div className="max-w-3xl mx-auto">
        <Button 
          variant="ghost" 
          onClick={() => navigate(-1)} // Go back to previous page
          className="mb-4 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-800"
        >
          <ChevronLeft className="h-5 w-5 mr-2" />
          Back
        </Button>
        <h1 className="text-2xl font-bold mb-2 text-gray-900 dark:text-white">Post Detail</h1>
        <p className="text-gray-700 dark:text-gray-300">Displaying details for Post ID: {postId}</p>
        
        <div className="mt-6">
          <h2 className="text-xl font-semibold mb-3 text-gray-800 dark:text-gray-200">Comments</h2>
          <p className="text-gray-600 dark:text-gray-400">Comments section will appear here.</p>
          {/* Comment form will go here */}
        </div>
      </div>
    </div>
  );
};

export default PostDetailScreen;
--- END OF FILE: src/components/posts/PostDetailScreen.tsx ---

--------------------------------------------------------------

--- START OF FILE (Optional): src/components/communities/PostListItem.tsx ---
// src/components/communities/PostListItem.tsx
import React, { useState, MouseEvent, useEffect } from 'react'; // Added useEffect
import { useNavigate } from 'react-router-dom'; // For navigating to community from badge
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { ChevronUp, ChevronDown, MessageSquare, ExternalLink } from 'lucide-react';
import apiClient from '@/lib/apiClient';
import { useAuth } from '@/contexts/AuthContext';
import { toast } from '@/hooks/use-toast';
import { Post, Author, CommunitySummary, VoteApiResponse } from '@/types/community'; // Assuming types are defined in src/types/community.ts

interface PostListItemProps {
  post: Post;
  index: number;
  showCommunity?: boolean;
  onClick: () => void; // For navigating to post detail
  onVoteChange?: (postId: string, newVoteData: VoteApiResponse['data']) => void;
}

const PostListItem: React.FC<PostListItemProps> = ({ post, index, showCommunity = false, onClick, onVoteChange }) => {
  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();

  const [userVote, setUserVote] = useState<'up' | 'down' | null>(post.user_vote);
  const [score, setScore] = useState((post.upvotes ?? 0) - (post.downvotes ?? 0)); // Calculate net score
  const [isVoting, setIsVoting] = useState(false);

  useEffect(() => {
    setUserVote(post.user_vote);
    setScore((post.upvotes ?? 0) - (post.downvotes ?? 0));
  }, [post.user_vote, post.upvotes, post.downvotes]);

  const handleVote = async (voteDirectionAttempt: 'up' | 'down', e: MouseEvent) => {
    e.stopPropagation();
    if (!isAuthenticated) {
      toast({ title: "Authentication Required", description: "Please log in to vote.", variant: "destructive"});
      return;
    }
    if (isVoting) return;
    setIsVoting(true);

    const originalUserVote = userVote;
    const originalScore = score;

    let newApiDirection: 'up' | 'down' | 'none';
    if (userVote === voteDirectionAttempt) { // Clicking the same button to undo vote
      newApiDirection = 'none';
    } else {
      newApiDirection = voteDirectionAttempt;
    }

    // Optimistic UI Update
    let newOptimisticScore = score;
    if (newApiDirection === 'none') { // Clearing a vote
        if (originalUserVote === 'up') newOptimisticScore--;
        if (originalUserVote === 'down') newOptimisticScore++;
        setUserVote(null);
    } else { // Setting or changing a vote
        if (originalUserVote === 'up') newOptimisticScore--; // Remove previous upvote effect
        else if (originalUserVote === 'down') newOptimisticScore++; // Remove previous downvote effect

        if (newApiDirection === 'up') newOptimisticScore++;
        else if (newApiDirection === 'down') newOptimisticScore--;
        setUserVote(newApiDirection);
    }
    setScore(newOptimisticScore);

    try {
      const response = await apiClient<VoteApiResponse>(`/posts/${post.id}/vote`, {
        method: 'POST',
        data: { direction: newApiDirection },
      });

      if (response.status === 'success' && response.data) {
        setScore((response.data.upvotes ?? 0) - (response.data.downvotes ?? 0));
        setUserVote(response.data.user_vote);
        if (onVoteChange) {
            onVoteChange(post.id, response.data);
        }
      } else {
        throw new Error((response as any).message || "Failed to record vote.");
      }
    } catch (error: any) {
      toast({ title: "Error Voting", description: error.message || "Could not submit vote.", variant: "destructive" });
      setUserVote(originalUserVote); // Revert
      setScore(originalScore); // Revert
    } finally {
      setIsVoting(false);
    }
  };

  const formatTimeAgo = (isoDate: string) => {
    if (!isoDate) return '';
    const date = new Date(isoDate);
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    if (diffInSeconds < 5) return 'Just now';
    if (diffInSeconds < 60) return `${diffInSeconds}s ago`;
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}h ago`;
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays}d ago`;
  };
  
  const displayedContent = post.content_text || post.contentPreview || "";

  return (
    <Card
      className="animate-slide-up cursor-pointer hover:shadow-lg transition-all dark:bg-gray-800"
      style={{ animationDelay: `${index * 0.05}s` }}
      onClick={onClick}
    >
      <CardContent className="p-4">
        {showCommunity && post.community && (
          <div className="mb-2 flex items-center space-x-1.5">
            {post.community.icon && <span className="text-sm">{post.community.icon}</span>}
            <button
                className="text-xs font-medium text-gray-600 dark:text-gray-400 hover:underline focus:outline-none"
                onClick={(e) => { e.stopPropagation(); navigate(`/communities/${post.community?.slug || post.community?.id}`);}}
            >
                {post.community.name}
            </button>
            <span className="text-xs text-gray-400 dark:text-gray-500">•</span>
            <span className="text-xs text-gray-500 dark:text-gray-400">Posted by u/{post.author.name}</span>
            <span className="text-xs text-gray-400 dark:text-gray-500">•</span>
            <span className="text-xs text-gray-500 dark:text-gray-400">{formatTimeAgo(post.createdAt)}</span>
          </div>
        )}

        {!showCommunity && (
            <div className="flex items-center space-x-3 mb-2">
            <Avatar className="h-6 w-6">
                <AvatarImage src={post.author.avatarUrl} alt={post.author.name}/>
                <AvatarFallback>{post.author.name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U'}</AvatarFallback>
            </Avatar>
            <div>
                <p className="text-xs font-medium text-gray-700 dark:text-gray-300">u/{post.author.name}</p>
                <p className="text-xs text-gray-500 dark:text-gray-400">{formatTimeAgo(post.createdAt)}</p>
            </div>
            </div>
        )}


        <h3 className="font-semibold text-lg text-gray-900 dark:text-white mb-1 hover:text-unicampus-red">{post.title}</h3>
        
        {post.content_type === 'text' && displayedContent && (
          <p className="text-sm text-gray-700 dark:text-gray-300 line-clamp-4 mb-3">
            {displayedContent}
          </p>
        )}

        {post.content_type === 'image' && post.image_url && (
          <div className="my-3 rounded-lg overflow-hidden max-h-96 flex justify-center bg-gray-100 dark:bg-gray-700">
            <img src={post.image_url} alt="Post image" className="max-h-96 object-contain" />
          </div>
        )}

        {post.content_type === 'link' && post.link_url && (
            <a
                href={post.link_url}
                target="_blank"
                rel="noopener noreferrer"
                onClick={(e) => e.stopPropagation()}
                className="my-3 p-3 border dark:border-gray-700 rounded-md flex items-center space-x-2 text-sm text-blue-600 dark:text-blue-400 hover:bg-gray-50 dark:hover:bg-gray-700"
            >
                <ExternalLink className="h-4 w-4 flex-shrink-0" />
                <span className="truncate flex-grow">{post.link_url}</span>
            </a>
        )}
        {post.tags && post.tags.length > 0 && (
             <div className="mb-3 flex flex-wrap gap-1">
                {post.tags.map(tag => (
                    <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
                ))}
            </div>
        )}

        <div className="flex items-center justify-start space-x-4">
            <div className="flex items-center space-x-0.5">
            <Button
                variant="ghost" size="sm"
                className={`p-1 h-8 w-8 rounded-full ${userVote === 'up' ? 'text-unicampus-red bg-unicampus-red/10' : 'text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700'}`}
                onClick={(e) => handleVote('up', e)} // Simplified: always try 'up'
                disabled={isVoting}
            > <ChevronUp className="h-5 w-5" /> </Button>
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300 min-w-[2.5rem] text-center tabular-nums">{score}</span>
            <Button
                variant="ghost" size="sm"
                className={`p-1 h-8 w-8 rounded-full ${userVote === 'down' ? 'text-blue-600 bg-blue-600/10' : 'text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700'}`}
                onClick={(e) => handleVote('down', e)} // Simplified: always try 'down'
                disabled={isVoting}
            > <ChevronDown className="h-5 w-5" /> </Button>
            </div>
          
          <Button variant="ghost" size="sm" className="flex items-center space-x-1.5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300" onClick={onClick}>
            <MessageSquare className="h-4 w-4" />
            <span className="text-sm">{post.commentCount}</span>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default PostListItem;
--- END OF FILE (Optional): src/components/communities/PostListItem.tsx ---

--------------------------------------------------------------

--- START OF CORE FILE: src/contexts/AuthContext.tsx ---
// src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import apiClient from '../lib/apiClient'; // Import the API client

// Updated User interface based on your /auth/login/student response
interface User {
  id: string;         // User's MongoDB ObjectId
  usn: string;
  name: string;
  email: string;       // e.g., usn@unicampus.app
  role: 'student' | 'admin'; // Assuming admin role also exists
  collegeProfile?: {
    officialName?: string;
    department?: string;
    semester?: number;
    section?: string;
    usn?: string; // Can be redundant but might be from a different source
    // Add other fields as per your API
  };
  mostRecentCGPA?: number | null;
  avatar?: string | null;
  // Add fields from /users/me if different/more comprehensive
  academicSummaries?: Array<{ code: string; name: string; cieTotal: number | null; attendancePercentage: number | null }>;
  examHistory?: Array<{ semesterName: string; creditsRegistered: number; creditsEarned: number; sgpa: number | null; cgpa: number | null }>;
  collegeDataLastUpdated?: string; // ISO datetime
  createdAt?: string; // ISO datetime
  updatedAt?: string; // ISO datetime
}

// API Response structure for login
interface LoginApiResponse {
  status: string;
  accessToken: string;
  refreshToken: string;
  data: {
    user: User;
  };
}

// API Response structure for /users/me
interface UserProfileApiResponse {
    status: string;
    data: {
        user: User;
    };
}

// API Response for token refresh
interface RefreshTokenApiResponse {
    status: string;
    accessToken: string;
}


interface AuthContextType {
  user: User | null;
  accessToken: string | null; // Store accessToken
  isLoading: boolean; // For initial load and login/logout processes
  isAuthenticated: boolean;
  login: (usn: string, dob_dd: string, dob_mm: string, dob_yyyy: string) => Promise<void>; // Update params
  logout: () => Promise<void>;
  fetchUserProfile: () => Promise<void>; // To load user on app start or refresh
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [accessToken, setAccessToken] = useState<string | null>(localStorage.getItem('accessToken'));
  const [refreshToken, setRefreshToken] = useState<string | null>(localStorage.getItem('refreshToken'));
  const [isLoading, setIsLoading] = useState(true); // True initially to load user

  const isAuthenticated = !!accessToken && !!user; // User must also be loaded

  useEffect(() => {
    const loadUserFromToken = async () => {
      if (accessToken) {
        try {
          await fetchUserProfile(); // Try to fetch user profile if token exists
        } catch (error: any) {
          console.error("Failed to load user with existing token:", error);
          if (error.httpStatus === 401) { // If token is invalid/expired
            await attemptRefreshTokenAndRetry(fetchUserProfile);
          } else {
            // For other errors, or if refresh fails, clear auth data
            clearAuthData();
          }
        }
      }
      setIsLoading(false);
    };
    loadUserFromToken();
  }, []); // Empty dependency array: run once on mount

  const storeAuthData = (accessTok: string, refreshTok: string, userData?: User) => {
    localStorage.setItem('accessToken', accessTok);
    localStorage.setItem('refreshToken', refreshTok);
    setAccessToken(accessTok);
    setRefreshToken(refreshTok);
    if (userData) {
        setUser(userData);
    }
  };

  const clearAuthData = () => {
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    setAccessToken(null);
    setRefreshToken(null);
    setUser(null);
  };

  const login = async (usn: string, dob_dd: string, dob_mm: string, dob_yyyy: string): Promise<void> => {
    setIsLoading(true);
    try {
      const response = await apiClient<LoginApiResponse>('/auth/login/student', {
        method: 'POST',
        data: { usn, dob_dd, dob_mm, dob_yyyy }, // Match your API request body
        isPublic: true, // Login doesn't require a token
      });

      if (response.status === 'success' && response.accessToken && response.refreshToken && response.data.user) {
        storeAuthData(response.accessToken, response.refreshToken, response.data.user);
      } else {
        // If API returns success but missing data, treat as error
        throw new Error(response.status || 'Login failed: Invalid response from server.');
      }
    } catch (error: any) {
      clearAuthData(); // Ensure tokens are cleared on login failure
      console.error("Login error:", error);
      throw error; // Re-throw to be caught by LoginScreen
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async () => {
    setIsLoading(true);
    // Call backend logout if it exists and does something meaningful (e.g., invalidates refresh token)
    try {
        if (accessToken) { // Only call if there's a token to invalidate
            await apiClient('/auth/logout', { method: 'POST' });
        }
    } catch (error) {
        console.warn("Backend logout call failed or not critical, clearing client-side tokens:", error);
    } finally {
        clearAuthData();
        setIsLoading(false);
        // Optionally navigate to login or home page after logout
        // navigate('/login'); // if using react-router
    }
  };

  const fetchUserProfile = async (): Promise<void> => {
    if (!localStorage.getItem('accessToken')) { // Use localStorage directly here as state might not be updated yet
      // setIsLoading(false); // Ensure loading state is managed
      return; // No token, no user to fetch
    }
    // setIsLoading(true); // Set loading true when fetching
    try {
      const response = await apiClient<UserProfileApiResponse>('/users/me', { method: 'GET' });
      if (response.status === 'success' && response.data.user) {
        setUser(response.data.user);
      } else {
        throw new Error('Failed to fetch user profile: Invalid response.');
      }
    } catch (error: any) {
      console.error("Fetch user profile error:", error);
      if (error.httpStatus === 401) { // Token might be expired
        // Attempt to refresh token, then retry fetching profile
        await attemptRefreshTokenAndRetry(fetchUserProfile);
      } else {
        // For other errors, or if refresh fails, clear auth data
        clearAuthData();
      }
      throw error; // Re-throw for components or initial load to handle
    }
    // finally { setIsLoading(false); } // Manage loading state appropriately
  };

  const attemptRefreshTokenAndRetry = async (retryCallback: () => Promise<void>) => {
    const currentRefreshToken = localStorage.getItem('refreshToken');
    if (!currentRefreshToken) {
      console.log("No refresh token available. Logging out.");
      clearAuthData();
      return;
    }

    try {
      console.log("Attempting to refresh token...");
      const refreshResponse = await apiClient<RefreshTokenApiResponse>('/auth/refresh-token', {
        method: 'POST',
        isRefreshTokenRequest: true, // Use refresh token for Authorization header
        isPublic: false, // Although it uses a token, it's a specific auth flow
      });

      if (refreshResponse.status === 'success' && refreshResponse.accessToken) {
        console.log("Token refreshed successfully.");
        // Store only the new access token. Refresh token might also be rotated by backend.
        // For simplicity, we assume refresh token remains valid or backend doesn't rotate it often.
        // If backend sends new refresh token, update it here.
        storeAuthData(refreshResponse.accessToken, currentRefreshToken); // Re-use old refresh token for now
        await retryCallback(); // Retry the original failed request (e.g., fetchUserProfile)
      } else {
        console.error("Token refresh failed with success status but no new token.");
        clearAuthData(); // If refresh fails, logout
      }
    } catch (refreshError) {
      console.error("Token refresh API call failed:", refreshError);
      clearAuthData(); // If refresh fails, logout
    }
  };


  return (
    <AuthContext.Provider value={{
      user,
      accessToken, // Expose accessToken if needed by other parts of app directly (though apiClient handles it)
      isLoading,
      login,
      logout,
      isAuthenticated,
      fetchUserProfile
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
--- END OF CORE FILE: src/contexts/AuthContext.tsx ---

--------------------------------------------------------------

--- START OF CORE FILE: src/lib/apiClient.ts ---
// src/lib/apiClient.ts
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api/v1';

// Helper to get token from localStorage (AuthContext will manage this)
const getAuthToken = (): string | null => {
  return localStorage.getItem('accessToken');
};

interface ApiClientOptions extends RequestInit {
  data?: any;
  isPublic?: boolean; // To bypass auth header for public routes
  isRefreshTokenRequest?: boolean; // Special flag for refresh token request
}

// Define a generic error structure your API might return
interface ApiError {
  status: string; // "fail" or "error"
  message: string;
  // Add other potential error fields
}

export interface PaginatedResponse<T> {
  status: string;
  results?: number; // If your API returns total results
  data: T[]; // Assuming data is always an array for paginated lists
  // Add other pagination fields if your API returns them (e.g., totalPages, currentPage)
}


async function apiClient<T>(
  endpoint: string,
  { data, headers: customHeaders, isPublic = false, isRefreshTokenRequest = false, ...customConfig }: ApiClientOptions = {}
): Promise<T> {
  const config: RequestInit = {
    method: data ? 'POST' : 'GET', // Default to POST if data is provided
    ...customConfig,
    headers: {
      ...(data && !(data instanceof FormData) && { 'Content-Type': 'application/json' }), // Don't set for FormData
      ...customHeaders,
    },
  };

  if (!isPublic) {
    const token = isRefreshTokenRequest ? localStorage.getItem('refreshToken') : getAuthToken();
    if (token) {
      config.headers = {
        ...config.headers,
        Authorization: `Bearer ${token}`,
      };
    } else if (endpoint !== '/auth/login/student' && !endpoint.startsWith('/app/info')) {
      // For non-public routes (excluding login and app info), if no token, it's an issue.
      // AuthContext will handle redirect or state change.
      console.warn(`No auth token found for protected route: ${endpoint}`);
      // Throw an error or let AuthContext handle this by checking isAuthenticated
      return Promise.reject({ status: 401, message: 'Authentication token is missing.' });
    }
  }

  if (data) {
    if (data instanceof FormData) {
      config.body = data; // FormData handles its own content type
    } else {
      config.body = JSON.stringify(data);
    }
  }

  const response = await fetch(`${API_BASE_URL}${endpoint}`, config);

  if (!response.ok) {
    // Attempt to parse error JSON, otherwise use statusText
    let errorData: ApiError | { message: string };
    try {
      errorData = await response.json();
      if (typeof errorData !== 'object' || !('message' in errorData)) {
        // If the parsed JSON doesn't have a message, create one
        errorData = { message: response.statusText || 'Unknown error occurred' };
      }
    } catch (e) {
      errorData = { message: response.statusText || 'Failed to parse error response.' };
    }
    // Add status code to the rejected error object
    return Promise.reject({ httpStatus: response.status, ...errorData });
  }

  if (response.status === 204 || response.headers.get('Content-Length') === '0') {
    // For 204 No Content or empty responses, resolve with a success indicator or undefined.
    // Depending on T, you might want to cast or return a specific success object.
    return { status: 'success', message: 'Operation successful' } as unknown as T;
  }

  return response.json() as Promise<T>;
}

export default apiClient;
--- END OF CORE FILE: src/lib/apiClient.ts ---

--------------------------------------------------------------

--- START OF CORE FILE: src/App.tsx ---
// src/App.tsx
import React from 'react'; // Ensure React is imported if using React.ReactNode etc.
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { Routes, Route, Navigate } from "react-router-dom";
import { ThemeProvider } from "@/contexts/ThemeContext";
import { useAuth } from "@/contexts/AuthContext";
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";
import LoginScreen from "@/components/auth/LoginScreen";
import Dashboard from "@/components/dashboard/Dashboard";
import ResultsScreen from "@/components/results/ResultsScreen";
import CommunitiesScreen from "@/components/communities/CommunitiesScreen";
import CommunityDetailScreen from "@/components/communities/CommunityDetailScreen";
import AttendanceScreen from "@/components/attendance/AttendanceScreen";
import ResourcesScreen from "@/components/resources/ResourcesScreen";
import SettingsScreen from "@/components/settings/SettingsScreen";
import CreateResourceScreen from "@/components/resources/CreateResourceScreen"; // Import the new screen

const queryClient = new QueryClient();

const ProtectedRoute = ({ children }: { children: React.ReactNode }) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    // You can render a global loading spinner/page here
    return <div className="flex items-center justify-center min-h-screen">Loading Session...</div>;
  }

  return isAuthenticated ? <>{children}</> : <Navigate to="/" replace />; // Redirect to Index (StartingScreen)
};

const AppRoutes = () => {
  return (
    <Routes>
      <Route path="/" element={<Index />} />
      <Route path="/login/student" element={<LoginScreen />} />
      {/* <Route path="/login/admin" element={<LoginScreen type="admin" />} />  // Assuming one LoginScreen for now */}
      <Route path="/register" element={<div className="min-h-screen flex items-center justify-center">Registration coming soon!</div>} />

      {/* Protected Routes */}
      <Route path="/dashboard" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />
      <Route path="/results" element={<ProtectedRoute><ResultsScreen /></ProtectedRoute>} />
      <Route path="/communities" element={<ProtectedRoute><CommunitiesScreen /></ProtectedRoute>} />
      <Route path="/communities/:communityId" element={<ProtectedRoute><CommunityDetailScreen /></ProtectedRoute>} />
      <Route path="/attendance" element={<ProtectedRoute><AttendanceScreen /></ProtectedRoute>} />
      <Route path="/resources" element={<ProtectedRoute><ResourcesScreen /></ProtectedRoute>} />
      <Route path="/resources/new" element={<ProtectedRoute><CreateResourceScreen /></ProtectedRoute>} /> {/* Route for creating resource */}
      <Route path="/settings" element={<ProtectedRoute><SettingsScreen /></ProtectedRoute>} />

      <Route path="*" element={<NotFound />} />
    </Routes>
  );
};

const App = () => (
  <QueryClientProvider client={queryClient}>
    <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <AppRoutes />
      </TooltipProvider>
    </ThemeProvider>
  </QueryClientProvider>
);

export default App;
--- END OF CORE FILE: src/App.tsx ---

--------------------------------------------------------------

--- START OF CORE FILE: src/types/community.ts ---
// src/types/community.ts

export interface Author {
  id: string;
  _id?: string; // Allow _id from API
  name: string;
  avatarUrl?: string; // Or avatar
}

// For API responses that might use snake_case
interface CommunityApiSnakeCase {
  banner_image_url?: string | null;
  icon_url?: string | null;
  created_at?: string;
  updated_at?: string;
  member_count?: number;
  post_count?: number | null;
  is_member?: boolean;
  // Add any other snake_case fields your API sends
}

// Frontend uses camelCase primarily
export interface CommunityBase extends CommunityApiSnakeCase {
  id: string; // Will be normalized from id or _id
  _id?: string;
  name: string;
  description: string;
  slug?: string;
  icon?: string; // Normalized from icon_url or icon
  bannerImage?: string; // Normalized from banner_image_url or bannerImage
  memberCount: number; // Normalized
  postCount?: number | null; // Normalized
  is_member?: boolean; // Normalized
  tags?: string[];
  rules?: string[];
  createdAt?: string; // Normalized
  updatedAt?: string; // Normalized
}

export interface CommunitySummary extends CommunityBase {}

export interface CommunityDetail extends CommunityBase {
  // Add any fields specific to the detail view not in summary
}

// For API responses that might use snake_case for posts
interface PostApiSnakeCase {
    content_type?: 'text' | 'image' | 'link';
    content_text?: string;
    image_url?: string;
    link_url?: string;
    created_at?: string;
    updated_at?: string;
    comment_count?: number;
    user_vote?: 'up' | 'down' | null;
}


export interface Post extends PostApiSnakeCase {
  id: string;
  _id?: string;
  title: string;
  contentType: 'text' | 'image' | 'link'; // Normalized
  contentText?: string; // Normalized
  contentPreview?: string;
  imageUrl?: string; // Normalized
  linkUrl?: string; // Normalized
  tags?: string[];
  author: Author;
  communityId: string;
  community?: CommunitySummary;
  createdAt: string; // Normalized
  updatedAt?: string; // Normalized
  upvotes: number;
  downvotes: number;
  commentCount: number; // Normalized
  userVote: 'up' | 'down' | null; // Normalized
}

// --- API Response Structures ---

export interface CommunityDetailApiResponse {
  status: string;
  data: {
    community: CommunityDetail; // Expects the API to send an object that can map to CommunityDetail
  };
}

export interface VoteApiResponse {
  status: string;
  data: {
    upvotes: number;
    downvotes: number;
    user_vote: 'up' | 'down' | null;
  };
}

export interface JoinLeaveApiResponse {
    status: string;
    message?: string;
    data?: { // API might return the updated community object (nested)
        community: CommunityDetail;
    };
}
--- END OF CORE FILE: src/types/community.ts ---

--------------------------------------------------------------

